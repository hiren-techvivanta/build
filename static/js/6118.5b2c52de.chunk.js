"use strict";(self.webpackChunkonewave=self.webpackChunkonewave||[]).push([[6118],{56118:(e,t,n)=>{n.d(t,{coinbaseWallet:()=>s});var i=n(98677),a=n(38639),c=n(43028),r=n(43340),o=n(84117);function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return"3"===e.version||e.headlessMode?function(e){const t=!1;let h,d,l,u,m;return(0,i.U)((i=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:s.type,async connect(){let{chainId:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{const t=await this.getProvider(),n=(await t.request({method:"eth_requestAccounts"})).map((e=>(0,c.b)(e)));l||(l=this.onAccountsChanged.bind(this),t.on("accountsChanged",l)),u||(u=this.onChainChanged.bind(this),t.on("chainChanged",u)),m||(m=this.onDisconnect.bind(this),t.on("disconnect",m));let i=await this.getChainId();if(e&&i!==e){const t=await this.switchChain({chainId:e}).catch((e=>{if(e.code===r.vx.code)throw e;return{id:i}}));i=t?.id??i}return{accounts:n,chainId:i}}catch(t){if(/(user closed modal|accounts received is empty|user denied account)/i.test(t.message))throw new r.vx(t);throw t}},async disconnect(){const e=await this.getProvider();l&&(e.removeListener("accountsChanged",l),l=void 0),u&&(e.removeListener("chainChanged",u),u=void 0),m&&(e.removeListener("disconnect",m),m=void 0),e.disconnect(),e.close()},async getAccounts(){const e=await this.getProvider();return(await e.request({method:"eth_accounts"})).map((e=>(0,c.b)(e)))},async getChainId(){const e=await this.getProvider(),t=await e.request({method:"eth_chainId"});return Number(t)},async getProvider(){if(!d){const a=await(async()=>{const{default:e}=await Promise.all([n.e(1599),n.e(4780),n.e(9466)]).then(n.t.bind(n,44780,19));return"function"!==typeof e&&"function"===typeof e.default?e.default:e})();h=new a({...e,reloadOnDisconnect:t});const c=h.walletExtension?.getChainId(),r=i.chains.find((t=>e.chainId?t.id===e.chainId:t.id===c))||i.chains[0],o=e.chainId||r?.id,s=e.jsonRpcUrl||r?.rpcUrls.default.http[0];d=h.makeWeb3Provider(s,o)}return d},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain(e){let{addEthereumChainParameter:t,chainId:n}=e;const c=i.chains.find((e=>e.id===n));if(!c)throw new r.ch(new a.nk);const s=await this.getProvider();try{return await s.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,o.cK)(c.id)}]}),c}catch(h){if(4902===h.code)try{let e,i;e=t?.blockExplorerUrls?t.blockExplorerUrls:c.blockExplorers?.default.url?[c.blockExplorers?.default.url]:[],i=t?.rpcUrls?.length?t.rpcUrls:[c.rpcUrls.default?.http[0]??""];const a={blockExplorerUrls:e,chainId:(0,o.cK)(n),chainName:t?.chainName??c.name,iconUrls:t?.iconUrls,nativeCurrency:t?.nativeCurrency??c.nativeCurrency,rpcUrls:i};return await s.request({method:"wallet_addEthereumChain",params:[a]}),c}catch(h){throw new r.vx(h)}throw new r.ch(h)}},onAccountsChanged(e){0===e.length?this.onDisconnect():i.emitter.emit("change",{accounts:e.map((e=>(0,c.b)(e)))})},onChainChanged(e){const t=Number(e);i.emitter.emit("change",{chainId:t})},async onDisconnect(e){i.emitter.emit("disconnect");const t=await this.getProvider();l&&(t.removeListener("accountsChanged",l),l=void 0),u&&(t.removeListener("chainChanged",u),u=void 0),m&&(t.removeListener("disconnect",m),m=void 0)}})))}(e):function(e){let t,h,d,l;return(0,i.U)((i=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:s.type,async connect(){let{chainId:e,...t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{const n=await this.getProvider(),i=(await n.request({method:"eth_requestAccounts",params:"instantOnboarding"in t&&t.instantOnboarding?[{onboarding:"instant"}]:[]})).map((e=>(0,c.b)(e)));h||(h=this.onAccountsChanged.bind(this),n.on("accountsChanged",h)),d||(d=this.onChainChanged.bind(this),n.on("chainChanged",d)),l||(l=this.onDisconnect.bind(this),n.on("disconnect",l));let a=await this.getChainId();if(e&&a!==e){const t=await this.switchChain({chainId:e}).catch((e=>{if(e.code===r.vx.code)throw e;return{id:a}}));a=t?.id??a}return{accounts:i,chainId:a}}catch(n){if(/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(n.message))throw new r.vx(n);throw n}},async disconnect(){const e=await this.getProvider();h&&(e.removeListener("accountsChanged",h),h=void 0),d&&(e.removeListener("chainChanged",d),d=void 0),l&&(e.removeListener("disconnect",l),l=void 0),e.disconnect(),e.close?.()},async getAccounts(){const e=await this.getProvider();return(await e.request({method:"eth_accounts"})).map((e=>(0,c.b)(e)))},async getChainId(){const e=await this.getProvider(),t=await e.request({method:"eth_chainId"});return Number(t)},async getProvider(){if(!t){const a="string"===typeof e.preference?{options:e.preference}:{...e.preference,options:e.preference?.options??"all"},{createCoinbaseWalletSDK:c}=await Promise.all([n.e(1599),n.e(483)]).then(n.bind(n,33094)),r=c({...e,appChainIds:i.chains.map((e=>e.id)),preference:a});t=r.getProvider()}return t},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain(e){let{addEthereumChainParameter:t,chainId:n}=e;const c=i.chains.find((e=>e.id===n));if(!c)throw new r.ch(new a.nk);const s=await this.getProvider();try{return await s.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,o.cK)(c.id)}]}),c}catch(h){if(4902===h.code)try{let e,i;e=t?.blockExplorerUrls?t.blockExplorerUrls:c.blockExplorers?.default.url?[c.blockExplorers?.default.url]:[],i=t?.rpcUrls?.length?t.rpcUrls:[c.rpcUrls.default?.http[0]??""];const a={blockExplorerUrls:e,chainId:(0,o.cK)(n),chainName:t?.chainName??c.name,iconUrls:t?.iconUrls,nativeCurrency:t?.nativeCurrency??c.nativeCurrency,rpcUrls:i};return await s.request({method:"wallet_addEthereumChain",params:[a]}),c}catch(h){throw new r.vx(h)}throw new r.ch(h)}},onAccountsChanged(e){0===e.length?this.onDisconnect():i.emitter.emit("change",{accounts:e.map((e=>(0,c.b)(e)))})},onChainChanged(e){const t=Number(e);i.emitter.emit("change",{chainId:t})},async onDisconnect(e){i.emitter.emit("disconnect");const t=await this.getProvider();h&&(t.removeListener("accountsChanged",h),h=void 0),d&&(t.removeListener("chainChanged",d),d=void 0),l&&(t.removeListener("disconnect",l),l=void 0)}})))}(e)}s.type="coinbaseWallet"}}]);
//# sourceMappingURL=6118.5b2c52de.chunk.js.map